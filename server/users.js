// Объявляем массив пользователей
const users = [];
// Объявляем функцию добавить пользователя, в которую передаем значения id,name,room
const addUser = ({ id, name, room }) => {
  // Убираем заглавные буквы в имени 

  // name = name.trim().toLowerCase();
  // room = room.trim().toLowerCase();

  // Объявляем константу существующие пользователи, с помощью перебора массива определяем пользователей которые соответствуют по имени и названию
  const userIsExist = users.find((user) => user.room === room && user.name === name);

  // Валидация на введение данных имени пользователя и названия комнаты
  if(!name || !room) return { error: 'Необходимо имя пользователя и название комнаты' };

  // Валидация на уже существующего пользователя
  if(userIsExist) return { error: 'Пользователь с таким именем уже существует  ' };

  // Объявляем константу пользователь и присваем в качестве значения объект с данными id,name,room
  const user = { id, name, room };

  // Добавляем в массив пользователей данные пользователя
  users.push(user);

  // Возвращаем значение пользователя
  return { user };
}

// Функция удалить пользователя, в качестве параметра принимает значение id
const removeUser = (id) => {
  // Константа индекс, которой присваевается значение, возвращаемое перебором массива users с целью найти пользователя с соотвествующим айди 
  const index = users.findIndex((user) => user.id === id);

  // Если пользователь был найден, то функция возвращает массив пользователей, на котором был использован метод splice, который убирает значение из массива, в нашем случае пользователя
  if(index !== -1) return users.splice(index, 1)[0];
}
// Функция проверить наличие пользователя 
const getUser = (id) => users.find((user) => user.id === id);
// Функция получить информацию о пользователях в комнате, с помощью метода filter, возвращает массив пользователей в комнате
const getUsersInRoom = (room) => users.filter((user) => user.room === room);

// Экспортируем пользователей
module.exports = { addUser, removeUser, getUser, getUsersInRoom };

