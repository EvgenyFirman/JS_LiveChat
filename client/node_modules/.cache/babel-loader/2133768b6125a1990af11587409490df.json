{"ast":null,"code":"import _slicedToArray from \"/Users/evgeny/Desktop/TZ_Chat\\xA0\\u2014 \\u043A\\u043E\\u043F\\u0438\\u044F/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/evgeny/Desktop/TZ_Chat\\xA0\\u2014 \\u043A\\u043E\\u043F\\u0438\\u044F/client/src/components/Chat/Chat.js\";\n// Импортируем библиотеки \nimport React, { useState, useEffect } from \"react\";\nimport queryString from 'query-string';\nimport io from \"socket.io-client\"; // Импортируем Компоненты\n\nimport TextContainer from '../TextContainer/TextContainer';\nimport Messages from '../Messages/Messages';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input'; // Импортируем стили\n\nimport './Chat.css'; // Объявляем переменную сокет\n\nlet socket; // Объявляем функцию чат, куда вносим параметр location\n\nconst Chat = ({\n  location\n}) => {\n  // Определяем стейты\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        room = _useState4[0],\n        setRoom = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        users = _useState6[0],\n        setUsers = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        message = _useState8[0],\n        setMessage = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        messages = _useState10[0],\n        setMessages = _useState10[1]; //Определяем точку сервера \n\n\n  const serverPoint = 'localhost:5000'; // Определяем функцию useEffect \n\n  useEffect(() => {\n    // Деструктурируем объект и присваиваем из строки url name и room\n    const _queryString$parse = queryString.parse(location.search),\n          name = _queryString$parse.name,\n          room = _queryString$parse.room; // Присваиваем перменной socket значение io, с параметром localhost:5000\n\n\n    socket = io(serverPoint); // Обновляем стейт name и room с помощью setName и setRoom\n\n    setRoom(room);\n    setName(name); // Используем метод emit, и передаем в функцию параметры 'join',name,room, а также колбэк функцию error,и указатель на localhost5000\n\n    socket.emit('join', {\n      name,\n      room\n    }, error => {\n      if (error) {\n        alert(error);\n      }\n    });\n  }, [serverPoint, location.search]); // Определяем функцию useEffect \n\n  useEffect(() => {\n    // При отправке сообщения, передаем его в стейт setMessages, в результате исполнения функции в с помощью spread оператора значения добавляется к массиву сообщений\n    socket.on('message', message => {\n      setMessages(messages => [...messages, message]);\n    }); // Рендерим пользователей на странице\n\n    socket.on(\"roomData\", ({\n      users\n    }) => {\n      setUsers(users);\n    });\n  }, []); // Определяем функцию отправить сообщение\n\n  const sendMessage = event => {\n    // Предотвращаем поведение события по умолчанию, чтобы не перезагружалась страница\n    event.preventDefault();\n\n    if (message) {\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n  }; // Рендерим компонент\n\n\n  return React.createElement(\"div\", {\n    className: \"outside__container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(InfoBar, {\n    room: room,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(Messages, {\n    messages: messages,\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(Input, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  })), React.createElement(Link, {\n    className: \"\",\n    to: \"/login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \" \\u041F\\u0435\\u0440\\u0435\\u0439\\u0442\\u0438 \\u043A \\u0412\\u0438\\u0434\\u0435\\u043E \\u0427\\u0430\\u0442\\u0443\"), React.createElement(TextContainer, {\n    users: users,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }));\n}; // Экспортируем компонент Чат\n\n\nexport default Chat;","map":{"version":3,"sources":["/Users/evgeny/Desktop/TZ_Chat — копия/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","TextContainer","Messages","InfoBar","Input","socket","Chat","location","name","setName","room","setRoom","users","setUsers","message","setMessage","messages","setMessages","serverPoint","parse","search","emit","error","alert","on","sendMessage","event","preventDefault"],"mappings":"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","sourcesContent":["// Импортируем библиотеки \nimport React, { useState, useEffect } from \"react\";\nimport queryString from 'query-string';\nimport io from \"socket.io-client\";\n\n\n// Импортируем Компоненты\nimport TextContainer from '../TextContainer/TextContainer';\nimport Messages from '../Messages/Messages';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\n\n// Импортируем стили\nimport './Chat.css';\n\n// Объявляем переменную сокет\nlet socket;\n\n// Объявляем функцию чат, куда вносим параметр location\nconst Chat = ({ location }) => {\n  // Определяем стейты\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [users, setUsers] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n\n//Определяем точку сервера \n  const serverPoint = 'localhost:5000';\n\n  // Определяем функцию useEffect \n  useEffect(() => {\n    // Деструктурируем объект и присваиваем из строки url name и room\n    const { name, room } = queryString.parse(location.search);\n\n    // Присваиваем перменной socket значение io, с параметром localhost:5000\n    socket = io(serverPoint);\n\n    // Обновляем стейт name и room с помощью setName и setRoom\n    setRoom(room);\n    setName(name)\n\n    // Используем метод emit, и передаем в функцию параметры 'join',name,room, а также колбэк функцию error,и указатель на localhost5000\n    socket.emit('join', { name, room }, (error) => {\n      if(error) {\n        alert(error);\n      }\n    });\n  }, [serverPoint, location.search]);\n  \n\n\n  // Определяем функцию useEffect \n  useEffect(() => {\n    // При отправке сообщения, передаем его в стейт setMessages, в результате исполнения функции в с помощью spread оператора значения добавляется к массиву сообщений\n    socket.on('message', message => {\n      setMessages(messages => [ ...messages, message ]);\n    });\n    // Рендерим пользователей на странице\n    socket.on(\"roomData\", ({ users }) => {\n      setUsers(users);\n    });\n}, []);\n\n  // Определяем функцию отправить сообщение\n  const sendMessage = (event) => {\n\n    // Предотвращаем поведение события по умолчанию, чтобы не перезагружалась страница\n    event.preventDefault();\n\n    if(message) {\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n  }\n\n  // Рендерим компонент\n  return (\n    <div className=\"outside__container\">\n      <div className=\"container\">\n          <InfoBar room={room} />\n          <Messages messages={messages} name={name} />\n          <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n          \n      </div>\n      \n      <Link className=\"\"to ='/login'> Перейти к Видео Чату</Link>\n     \n      \n      <TextContainer users={users}/>\n      \n    </div>\n  );\n}\n// Экспортируем компонент Чат\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}